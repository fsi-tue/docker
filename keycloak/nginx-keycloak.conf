server_tokens off;

set_real_ip_from 10.19.0.2; # HAproxy local IP
set_real_ip_from 134.2.220.61; # HAproxy external IP
set_real_ip_from 10.0.1.0/24;
real_ip_header proxy_protocol; # proxy_protocol needed
real_ip_recursive on;

map $upstream_http_cache_control $cachecontrolINI {
    ""        "no-cache, no-store, must-revalidate";
    default   $upstream_http_cache_control;
}
map $upstream_status $cachecontrol {
    304 $upstream_http_cache_control;
    default $cachecontrolINI;
}

# only allow connections from the fsi WireGuard subnet to access the master admin interfaces
geo $proxy_protocol_addr $geo_proxy_protocol_addr {
	192.168.134.0/27 0;
	default 1;
}

proxy_http_version 1.1;
proxy_socket_keepalive on;

server {

	server_name aai.fsi.uni-tuebingen.de;

	listen 443 ssl http2 proxy_protocol;

	include shared/ssl.conf;

	ssl_certificate ssl/fullchain.cer;
	ssl_certificate_key ssl/aai.fsi.uni-tuebingen.de.key;

	ssl_certificate ssl-ecc/fullchain.cer;
	ssl_certificate_key ssl-ecc/aai.fsi.uni-tuebingen.de.key;

	# healthcheck endpoint, used by healthcheck definition in docker-compose.yml
	include shared/healthcheck-endpoint.conf;

	# disallow all search engine robots
	location = /robots.txt {
		return 200 "User-agent: *\nDisallow: /\n";
		include shared/security-headers.conf;
	}

	#location = / {
#		add_header Cache-Control "no-cache, no-store, must-revalidate";
#		return 302 /auth/;
#		include shared/security-headers.conf;
#	}

	location = /auth/ {
		add_header Cache-Control "no-cache, no-store, must-revalidate";
		return 302 /;
		include shared/security-headers.conf;
	}

	location = / {
		root /var/www/keycloak/;
		index index.html;
		try_files $uri $uri/ =404;
		add_header Cache-Control "no-cache, no-store, must-revalidate";
		include shared/security-headers.conf;
	}
	location = /index.html {
		root /var/www/keycloak/;
		index index.html;
		try_files $uri $uri/ =404;
		add_header Cache-Control "no-cache, no-store, must-revalidate";
		include shared/security-headers.conf;
	}

	location ~ /auth/(realms|admin)/master {
		if ($geo_proxy_protocol_addr) { return 403; }

		include shared/security-headers.conf;

		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $proxy_protocol_addr;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header X-Forwarded-For $proxy_protocol_addr;

		proxy_hide_header Cache-Control;
		add_header Cache-Control $cachecontrol always;

		proxy_pass http://keycloak:8080;
	}

	location / {
		include shared/security-headers.conf;

		proxy_set_header Host $host;
                proxy_set_header X-Real-IP $proxy_protocol_addr;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header X-Forwarded-For $proxy_protocol_addr;

		proxy_hide_header Cache-Control;
		add_header Cache-Control $cachecontrol always;

		proxy_pass http://keycloak:8080;
	}
}
